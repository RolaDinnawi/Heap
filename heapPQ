import java.util.ArrayList;
import java.util.EmptyStackException;

public class HeapPQ {
    ArrayList<Integer> heap;

    public HeapPQ() {
        heap = new ArrayList<>();
    }

    public int size() {
        return heap.size();
    }

    public boolean isEmpty() {
        return size() == 0;
    }

    public int parent(int j) {
        return (j - 1) / 2;
    }

    public int right(int j) {
        return 2 * j + 2;
    }

    public int left(int j) {
        return 2 * j + 1;
    }

    public boolean hasLeft(int j) {
        return left(j) < size();
    }

    public boolean hasRight(int j) {
        return right(j) < size();
    }

    public void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    public void downheap(int j) {
        while (hasLeft(j)) {
            int leftChild = left(j);
            int largestChild = leftChild;
            if (hasRight(j)) {
                int rightChild = right(j);
                if (heap.get(rightChild) > heap.get(leftChild))
                    largestChild = rightChild;
            }
            if (heap.get(largestChild) <= heap.get(j)) {
                break;
            }
            swap(largestChild, j);
            j = largestChild;
        }
    }

    private void heapify() {
        int start = parent(size() - 1);
        for (int i = start; i >= 0; i--)
            downheap(i);
    }

    public void add(int data) {
        heap.add(data);
        int index = size() - 1;
        while (index > 0) {
            int parentIndex = parent(index);
            if (heap.get(index) <= heap.get(parentIndex)) {
                break;
            }
            swap(index, parentIndex);
            index = parentIndex;
        }
    }

    public int delete() {
        if (isEmpty())
            throw new EmptyStackException();
        int first = heap.get(0);
        heap.set(0, heap.get(size() - 1));
        heap.remove(size() - 1);
        downheap(0);
        return first;
    }

    public int peek() {
        if (isEmpty())
            throw new EmptyStackException();
        return heap.get(0);
    }

    public void print() {
        print(0);
        System.out.println();
    }

    private void print(int index) {
        if (index < size()) {
            print(left(index));
            System.out.print(heap.get(index) + " ");
            print(right(index));
        }
    }

    public void printArray() {
        for (int i = 0; i < heap.size(); i++) {
            System.out.print(heap.get(i) + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        HeapPQ pq = new HeapPQ();
        pq.add(4);
        pq.add(5);
        pq.add(2);
        pq.add(1);
        pq.add(3);
        pq.add(6);
        pq.print();
        pq.printArray();
        while (!pq.isEmpty()) {
            System.out.println(pq.delete());
        }
    }
}
